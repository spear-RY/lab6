## source /c/cs422/env.sh

# Start Lab 6

List here the following info:
1. who you have worked with
Yuran Zhu and Jingyu Yao. We cooperated on this project and each implemented differetn parts of the project.

2. whether you coded this assignment together, and if not, who worked on which part
Yuran implemented the allocation of super page and consecutive pages in the kernel, as well as the kernel test cases for testing the allocations in make TEST=1.
Jingyu implemented the system call mmap() for allowing a user process to map super and consecutive pages, as well as the get_ptbl syscall that demonstrates the process for the user process.

We worked together on debugging and making the sys_fork work with the new memory allocation system.

3. brief description of what you have implemented
Run make TEST = 1 to see our test cases for the new memory allocation system.
Run make qemu-nox, and then run startuser, which runs the modified ding process that showcases how a user process can use mmap to map super pages and consecutive pages for itself.

Super page = 1024 normal pages
Consecutive page = arbitrary number of pages of our choice

We implemented an advanced memory allocation system that allows the allocation of super pages and consecutive pages. We achieved this by modifying the MPT layer.

We implemented the syscall mmap that allows user process to map the aformentioned super pages and consecutive pages. We use a option flag to determine whether to allocate super or consective pages. We use a size argument to determine the number of pages to allocate if given the consecutive flag. We demonstrate the changes in the ptbl entry by using another system called get_ptbl_entry to examine the actual changes reflected in the kernel.

We further made changes to copy-on-write to allow the lab3 forking functions to work with the new memory allocation system. In particular, the copy on write will successfully copy a process that has been allocated with super or consecutive pages accordingly.